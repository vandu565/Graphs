#include <iostream>
using namespace std;
#include<vector>
#include<queue>
#include<algorithm>

void print(int** edges, int n, int sv, bool* visited, vector<int>* smalloutput){
  smalloutput->push_back(sv);
  visited[sv] = true;
  for(int i=0; i<n; i++){
    if(i==sv){
      continue;
    }
    if(edges[sv][i]==1){
      if(visited[i]){
        continue;
      }
      print(edges, n, i, visited,smalloutput);
    }
  }
}


vector<vector<int>*>* isconnected(int **edges ,int n) {
      bool *visited=new bool[n];
    for(int i=0;i<n;i++)
    {visited[i]=false;}
  
      vector<vector<int>*>* final= new vector<vector<int>*>();
    
     for(int i=0 ;i<n;i++){
         
        if(! visited[i])
            
        {  vector<int>* smalloutput = new vector<int>();
            print(edges , n,i,visited,smalloutput);
         
        
        final->push_back(smalloutput);}
    }
      return final;
}



int main() {
 int n, e;
    cin >> n >> e;
    int **edges=new int*[n];
        for(int i=0;i<n;i++)
        {edges[i]=new int[n];
        for(int j=0;j<n;j++)
        { edges[i][j]=0;
        }
}
    for(int i=0;i<e;i++)
    {int f,s;
    cin>>f>>s;
    edges[f][s]=1;
    edges[s][f]=1;
    }
   
   
 vector<vector<int>*>*finals=new vector<vector<int>*>;
    
        finals=isconnected(edges,n);
    for(int i=0 ;i<finals->size();i++){
        
         vector<int>*comp= finals->at(i);
        sort(comp->begin(),comp->end());
         for(int j=0 ;j<comp->size();j++){
             cout<<comp->at(j)<<" ";
         }
        
        
        cout<<endl;
        
        
        
    }
