#include <iostream>
#include<vector>
using namespace std;
 vector<int>* bfs(int **edges,int n,bool *visited,int a,int b)
 {  if(a==b){
     vector<int>* output=new vector<int>();
         output->push_back(a);
     return output;
     
 }

  visited[a]=true;
  for(int i=0;i<n;i++){
      if(i==a)
      {continue;}
      
      if(edges[a][i]!=0 && !visited[i])
      {
         vector<int>*  soutput = bfs(edges,n,visited,i,b);
               if(soutput !=NULL)
               {soutput->push_back(a);
               return soutput;}
      }
      return NULL;
  }
 }
 
 vector<int>* hasPath(int **edges,int n,int a,int b) 
 {
      bool *visited=new bool[n];
    for(int i=0;i<n;i++)
    {visited[i]=false;}
      
     vector<int>* outputs = bfs(edges,n,visited,a,b);
     return outputs;
 }
  
  
         
int main() {
    int n, e;
    cin >> n >> e;
    int **edges=new int*[n];
        for(int i=0;i<n;i++)
        {edges[i]=new int[n];
        for(int j=0;j<n;j++)
        { edges[i][j]=0;
        }
}
    for(int i=0;i<e;i++)
    {int f,s;
    cin>>f>>s;
    edges[f][s]=1;
    edges[s][f]=1;
    }
    int a ,b ;
    cin>>a>>b;
   
       vector<int>* outputk =  hasPath(edges,n,a,b);
     
    if(outputk !=NULL ){
        
       for(int i=0;i<outputk->size();i++)
     {
        cout<<outputk->at(i)<<" ";
     } 
    }
    
     
    
    
