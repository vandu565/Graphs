oid print(int** edges, int n, int sv, bool* visited){
  
  visited[sv] = true;
  for(int i=1; i<=n; i++){
    if(i==sv){
      continue;
    }
    if(edges[sv][i]!=0 && !visited[i]){
     
      print(edges, n, i, visited);
    
  }
}
}
int solve(int n,int m,vector<int>u,vector<int>v)
{
	// Write your code here .
    
    int **edges=new int*[n];
        for(int i=1;i<=n;i++)
        {edges[i]=new int[n];
        for(int j=1;j<=n;j++)
        { edges[i][j]=0;
        }
}
    for(int i=0;i<m;i++)
    {int f,s;
     f=u.at(i);
     s=v.at(i);
    edges[f][s]=1;
    edges[s][f]=1;
    }
    
    int count=0;
   bool* visited=new bool[n];
    for(int i=1;i<=n;i++)
    {visited[i]=false;}
    
     for(int i=1 ;i<=n;i++){
         if(! visited[i])
         { 
            print(edges , n,i,visited);
         count=count+1;
        }
     }
    
  return count;
}
